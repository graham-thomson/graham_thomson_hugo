<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Graham Thomson</title>
    <link>http://grahamflemingthomson.com/posts/</link>
    <description>Recent content in Posts on Graham Thomson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jun 2019 21:17:24 -0400</lastBuildDate>
    
	<atom:link href="http://grahamflemingthomson.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>List of Lists</title>
      <link>http://grahamflemingthomson.com/posts/list-of-lists/</link>
      <pubDate>Tue, 18 Jun 2019 21:17:24 -0400</pubDate>
      
      <guid>http://grahamflemingthomson.com/posts/list-of-lists/</guid>
      <description>There are a seemingly infinite number of ways to flatten a list of lists in base Python. By flattening, I mean reducing the dimension of a list of lists. In numpy it would be something like:
import numpy as np np.arange(1, 13).reshape(4,3) # array([[ 1, 2, 3], # [ 4, 5, 6], # [ 7, 8, 9], # [10, 11, 12]]) # becomes np.arange(1, 13).reshape(4,3).reshape(-1) # array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])  But what is the fastest and cleanest way in base Python?</description>
    </item>
    
    <item>
      <title>Spark &#43; s3a:// = ❤️</title>
      <link>http://grahamflemingthomson.com/posts/spark-s3a/</link>
      <pubDate>Tue, 18 Jun 2019 09:31:24 -0400</pubDate>
      
      <guid>http://grahamflemingthomson.com/posts/spark-s3a/</guid>
      <description>Typically our data science AWS workflows follow this sequence:
 Turn on EC2. Copy data from S3 via awscli to local machine file system. Code references local data via /path/to/data/. ??? Profit.  However, if the data you need to reference is relatively small or you&amp;rsquo;re only passing over the data once, you can use s3a:// and stream the data direct from S3 into your code.
Say we have this script as visits_by_day.</description>
    </item>
    
    <item>
      <title>Cosine Similarity Spark</title>
      <link>http://grahamflemingthomson.com/posts/cosine-similarity-spark/</link>
      <pubDate>Tue, 18 Jun 2019 08:57:30 -0400</pubDate>
      
      <guid>http://grahamflemingthomson.com/posts/cosine-similarity-spark/</guid>
      <description>Cosine similarity between a static vector and each vector in a Spark data frame Ever want to calculate the cosine similarity between a static vector in Spark and each vector in a Spark data frame? Probably not, as this is an absurdly niche problem to solve but, if you ever have, here&amp;rsquo;s how to do it using spark.sql and a UDF.
# imports we&#39;ll need import numpy as np from pyspark.</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>http://grahamflemingthomson.com/posts/resume/</link>
      <pubDate>Mon, 17 Jun 2019 21:13:38 -0400</pubDate>
      
      <guid>http://grahamflemingthomson.com/posts/resume/</guid>
      <description>ABOUT Currently a data scientist at Publicis Spine which serves as a strategic partner in achieving data, analytics, and technology growth solutions to Publicis Groupe agencies and their clients.
SKILLS Python, SQL, Spark, Keras, Scala, Hadoop/Hive, PHP, APIs, git, HTML5, AWS, GCP, Windows/OSX/Linux TCP/IP, HTTP/S, SSL, SSH, FTP, Microsoft Excel/Office
EXPERIENCE Publicis Groupe, Boston — Lead Data Scientist February 2019 - PRESENT
 Machine learning and data science development for Publicis Spine.</description>
    </item>
    
  </channel>
</rss>